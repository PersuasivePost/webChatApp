// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String @unique
  email String @unique
  password String
  createdAt DateTime @default(now())
  firstName String
  lastName String

  isEmailVerified Boolean @default(false)
  // Relations

  friendshipsInitiated Friendship[] @relation("UserFriendshipsInitiated")
  friendshipsReceived Friendship[] @relation("UserFriendshipsReceived")

  groupsAdmin Group[] @relation("GroupAdmin")
  groupMemberships GroupMembers[]

  messages Message[] @relation("UserMessages")

  DeletedMessage DeletedMessage[]

  verificationCodes VerificationCode[]
}

model Friendship {
  id String @id @default(uuid())
  userId String
  friendId String
  status FriendshipStatus
  createdAt DateTime @default(now())
  // Relations

  user User @relation("UserFriendshipsInitiated", fields: [userId], references: [id])
  friend User @relation("UserFriendshipsReceived", fields: [friendId], references: [id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

model Group {
  id String @id @default(uuid())
  name String
  description String?
  adminId String
  inviteCode String @unique
  createdAt DateTime @default(now())
  // Relations

  admin User @relation("GroupAdmin", fields: [adminId], references: [id])
  members GroupMembers[]
  messages Message[] @relation("GroupMessages")
}

model GroupMembers {
  id String @id @default(uuid())
  groupId String
  userId String
  joinedAt DateTime @default(now())
  // Relations

  group Group @relation(fields: [groupId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Message {
  id String @id @default(uuid())
  content String
  senderId String
  privateChatId String? // For 1:1 chats
  groupId String? // For group chats
  createdAt DateTime @default(now())
  // Relations

  sender User @relation("UserMessages", fields: [senderId], references: [id])
  group Group? @relation("GroupMessages", fields: [groupId], references: [id])

  DeletedMessage DeletedMessage[]
}

// To be added later my friend

model DeletedMessage {
  id String @id @default(uuid())
  messageId String
  userId String
  deletedAt DateTime @default(now())
  // Relations

  message Message @relation(fields: [messageId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([messageId, userId]) 
}

model VerificationCode {
  id String @id @default(uuid())
  userId String?
  email String
  code String
  expiresAt DateTime
  user User? @relation(fields: [userId], references: [id])
}